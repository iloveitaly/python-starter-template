
"""AUTOGENERATED FILE: Do not edit manually.
Generated by react-router-routes from the React Router config.

- RoutePaths is a Literal of route patterns
- Per-route TypedDicts define snake_case keys for params
- react_router_path builds a path from a pattern and params
- react_router_url prepends BASE_URL (env) or an explicit base_url
"""
from typing import Literal, overload, TypedDict, Mapping, NotRequired
import re
from urllib.parse import quote
import os
import logging

logger = logging.getLogger("react_router_routes.generated")

RoutePaths = Literal["/", "/home", "/form", "/logout"]



ALIAS_MAP: dict[str, dict[str, str]] = {

}

# overloads for path


@overload
def react_router_path(path: Literal["/"], params: None | Mapping[str, object] = None, /) -> str: ...



@overload
def react_router_path(path: Literal["/home"], params: None | Mapping[str, object] = None, /) -> str: ...



@overload
def react_router_path(path: Literal["/form"], params: None | Mapping[str, object] = None, /) -> str: ...



@overload
def react_router_path(path: Literal["/logout"], params: None | Mapping[str, object] = None, /) -> str: ...


@overload
def react_router_path(path: RoutePaths, params: None | Mapping[str, object] = None, /) -> str: ...

def react_router_path(path: RoutePaths, params: Mapping[str, object] | None = None) -> str:
    """Render a URL path from a typed pattern and params.

    - Accepts snake_case or original token keys (via ALIAS_MAP)
    - Replaces required ":name" and optional ":name?" tokens
    - Replaces "*" with the "splat" param
    - Percent-encodes values (splat keeps "/")
    """
    values: dict[str, object] = {} if params is None else dict(params)
    alias = ALIAS_MAP.get(path, {})
    # accept both snake_case and original token keys
    for k, v in list(values.items()):
        if k in alias:
            values[alias[k]] = v

    rendered = path

    def _replace_optional(match: re.Match[str]) -> str:
        name = match.group(1)
        if name in values:
            return quote(str(values[name]), safe="")
        return ""

    rendered = re.sub(r":([A-Za-z0-9_]+)\?", _replace_optional, rendered)

    def _replace_required(match: re.Match[str]) -> str:
        name = match.group(1)
        assert name in values, f"missing required param: {name}"
        return quote(str(values[name]), safe="")

    rendered = re.sub(r":([A-Za-z0-9_]+)(?!\?)", _replace_required, rendered)

    if "*" in rendered:
        assert "splat" in values, "missing required param: splat"
        rendered = rendered.replace("*", quote(str(values["splat"]), safe="/"))

    rendered = re.sub(r"/{2,}", "/", rendered)
    if rendered != "/" and rendered.endswith("/"):
        rendered = rendered[:-1]
    return rendered

# overloads for url


@overload
def react_router_url(path: Literal["/"], params: None | Mapping[str, object] = None, base_url: str | None = None, /) -> str: ...



@overload
def react_router_url(path: Literal["/home"], params: None | Mapping[str, object] = None, base_url: str | None = None, /) -> str: ...



@overload
def react_router_url(path: Literal["/form"], params: None | Mapping[str, object] = None, base_url: str | None = None, /) -> str: ...



@overload
def react_router_url(path: Literal["/logout"], params: None | Mapping[str, object] = None, base_url: str | None = None, /) -> str: ...


@overload
def react_router_url(path: RoutePaths, params: None | Mapping[str, object] = None, base_url: str | None = None, /) -> str: ...

def react_router_url(path: RoutePaths, params: Mapping[str, object] | None = None, base_url: str | None = None) -> str:
    """Build a full URL by prepending base_url or ENV BASE_URL to the path."""
    built = react_router_path(path, params)
    base = base_url if base_url is not None else os.environ.get("BASE_URL")
    if not base:
        logger.warning("BASE_URL missing; returning path only: %s", path)
        return built

    return base.rstrip("/") + built
